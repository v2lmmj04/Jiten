// <auto-generated />
using System;
using System.Collections.Generic;
using Jiten.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jiten.Core.Migrations
{
    [DbContext(typeof(JitenDbContext))]
    [Migration("20250620215245_ExampleSentencesIndexing")]
    partial class ExampleSentencesIndexing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("jiten")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jiten.Core.Data.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeckId"));

                    b.Property<int>("CharacterCount")
                        .HasColumnType("integer");

                    b.Property<string>("CoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeckOrder")
                        .HasColumnType("integer");

                    b.Property<float>("DialoguePercentage")
                        .HasColumnType("real");

                    b.Property<float>("Difficulty")
                        .HasColumnType("real");

                    b.Property<string>("EnglishTitle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentDeckId")
                        .HasColumnType("integer");

                    b.Property<string>("RomajiTitle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SentenceCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueKanjiCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueKanjiUsedOnceCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueWordCount")
                        .HasColumnType("integer");

                    b.Property<int>("UniqueWordUsedOnceCount")
                        .HasColumnType("integer");

                    b.Property<int>("WordCount")
                        .HasColumnType("integer");

                    b.HasKey("DeckId");

                    b.HasIndex("EnglishTitle")
                        .HasDatabaseName("IX_EnglishTitle");

                    b.HasIndex("MediaType")
                        .HasDatabaseName("IX_MediaType");

                    b.HasIndex("OriginalTitle")
                        .HasDatabaseName("IX_OriginalTitle");

                    b.HasIndex("ParentDeckId");

                    b.HasIndex("RomajiTitle")
                        .HasDatabaseName("IX_RomajiTitle");

                    b.ToTable("Decks", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.DeckRawText", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<string>("RawText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeckId");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("IX_DeckRawText_DeckId");

                    b.ToTable("DeckRawTexts", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.DeckWord", b =>
                {
                    b.Property<int>("DeckWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeckWordId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("Occurrences")
                        .HasColumnType("integer");

                    b.Property<byte>("ReadingIndex")
                        .HasColumnType("smallint");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.HasKey("DeckWordId");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("IX_DeckId");

                    b.HasIndex("WordId", "ReadingIndex")
                        .HasDatabaseName("IX_WordReadingIndex");

                    b.HasIndex("WordId", "ReadingIndex", "DeckId")
                        .HasDatabaseName("IX_DeckWordReadingIndexDeck");

                    b.ToTable("DeckWords", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.ExampleSentence", b =>
                {
                    b.Property<int>("SentenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SentenceId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SentenceId");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("IX_ExampleSentence_DeckId");

                    b.ToTable("ExampleSentences", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.ExampleSentenceWord", b =>
                {
                    b.Property<int>("ExampleSentenceId")
                        .HasColumnType("integer");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<byte>("Position")
                        .HasColumnType("smallint");

                    b.Property<byte>("Length")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReadingIndex")
                        .HasColumnType("smallint");

                    b.HasKey("ExampleSentenceId", "WordId", "Position");

                    b.HasIndex("WordId", "ReadingIndex")
                        .HasDatabaseName("IX_ExampleSentenceWord_WordIdReadingIndex");

                    b.ToTable("ExampleSentenceWords", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictDefinition", b =>
                {
                    b.Property<int>("DefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefinitionId"));

                    b.PrimitiveCollection<List<string>>("DutchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("EnglishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("FrenchMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("GermanMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("HungarianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("RussianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("SlovenianMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("SpanishMeanings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.HasKey("DefinitionId");

                    b.HasIndex("WordId");

                    b.ToTable("Definitions", "jmdict");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictLookup", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<string>("LookupKey")
                        .HasColumnType("text");

                    b.HasKey("WordId", "LookupKey");

                    b.ToTable("Lookups", "jmdict");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictWord", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("ObsoleteReadings")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("PartsOfSpeech")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<int>>("PitchAccents")
                        .HasColumnType("int[]");

                    b.PrimitiveCollection<List<string>>("Priorities")
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<int[]>("ReadingTypes")
                        .IsRequired()
                        .HasColumnType("int[]");

                    b.PrimitiveCollection<List<string>>("Readings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<List<string>>("ReadingsFurigana")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("WordId");

                    b.ToTable("Words", "jmdict");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictWordFrequency", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("integer");

                    b.Property<int>("FrequencyRank")
                        .HasColumnType("integer");

                    b.Property<double>("ObservedFrequency")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<List<double>>("ReadingsFrequencyPercentage")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.PrimitiveCollection<List<int>>("ReadingsFrequencyRank")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.PrimitiveCollection<List<double>>("ReadingsObservedFrequency")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.PrimitiveCollection<List<int>>("ReadingsUsedInMediaAmount")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("UsedInMediaAmount")
                        .HasColumnType("integer");

                    b.HasKey("WordId");

                    b.ToTable("WordFrequencies", "jmdict");
                });

            modelBuilder.Entity("Jiten.Core.Data.Link", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LinkId"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer");

                    b.Property<int>("LinkType")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LinkId");

                    b.HasIndex("DeckId");

                    b.ToTable("Links", "jiten");
                });

            modelBuilder.Entity("Jiten.Core.Data.Deck", b =>
                {
                    b.HasOne("Jiten.Core.Data.Deck", "ParentDeck")
                        .WithMany("Children")
                        .HasForeignKey("ParentDeckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDeck");
                });

            modelBuilder.Entity("Jiten.Core.Data.DeckRawText", b =>
                {
                    b.HasOne("Jiten.Core.Data.Deck", "Deck")
                        .WithOne("RawText")
                        .HasForeignKey("Jiten.Core.Data.DeckRawText", "DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Jiten.Core.Data.DeckWord", b =>
                {
                    b.HasOne("Jiten.Core.Data.Deck", "Deck")
                        .WithMany("DeckWords")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Jiten.Core.Data.ExampleSentence", b =>
                {
                    b.HasOne("Jiten.Core.Data.Deck", "Deck")
                        .WithMany("ExampleSentences")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Jiten.Core.Data.ExampleSentenceWord", b =>
                {
                    b.HasOne("Jiten.Core.Data.ExampleSentence", "ExampleSentence")
                        .WithMany("Words")
                        .HasForeignKey("ExampleSentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jiten.Core.Data.JMDict.JmDictWord", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExampleSentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictDefinition", b =>
                {
                    b.HasOne("Jiten.Core.Data.JMDict.JmDictWord", null)
                        .WithMany("Definitions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictLookup", b =>
                {
                    b.HasOne("Jiten.Core.Data.JMDict.JmDictWord", null)
                        .WithMany("Lookups")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictWordFrequency", b =>
                {
                    b.HasOne("Jiten.Core.Data.JMDict.JmDictWord", null)
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jiten.Core.Data.Link", b =>
                {
                    b.HasOne("Jiten.Core.Data.Deck", "Deck")
                        .WithMany("Links")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Jiten.Core.Data.Deck", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DeckWords");

                    b.Navigation("ExampleSentences");

                    b.Navigation("Links");

                    b.Navigation("RawText");
                });

            modelBuilder.Entity("Jiten.Core.Data.ExampleSentence", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Jiten.Core.Data.JMDict.JmDictWord", b =>
                {
                    b.Navigation("Definitions");

                    b.Navigation("Lookups");
                });
#pragma warning restore 612, 618
        }
    }
}
